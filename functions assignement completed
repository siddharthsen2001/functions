{"cells":[{"cell_type":"markdown","source":["#FUNCTIONS\n"],"metadata":{"id":"swRPiTEXeSd5"}},{"cell_type":"markdown","source":["1. What is Python, and why is it popular?\n","- Python is programming language and a set of rules and symbol write in this python language, python is using for intruction to their computer through codes\n","(i) widely used in this market.\n","(ii) python having 137000 libraries.\n","(iii) python having big industry.\n","(iv) mostly using in this industry.\n","\n","2.What is an interpreter in Python ?\n","- An interpreter in Python is a program that reads and executes Python code line by line. Instead of converting the entire source code into machine code at once (like a compiler), the Python interpreter processes the code one statement at a time.\n","\n","3. What are pre-defined keywords in Python?\n","- What Are Pre-defined Keywords in Python?\n","\n","Pre-defined keywords in Python are reserved words that have special meanings and purposes in the language. You cannot use them as variable names, function names, or identifiers because Python uses them to define the syntax and structure of the program.\n","some examples - if, else, elif, while, for, break, continue, pass\n","\n","4. Can keywords be used as variable names?\n","- NO, keywords used in variables due to some reason\n","Python reserves keywords for special syntax and internal operations. Using them as variable names would confuse the interpreter.\n","\n","5. What is mutability in Python?\n","- Mutability in Python refers to whether or not an object‚Äôs value can be changed after it is created.\n","\n","6. Why are lists mutable, but tuples are immutable?\n","- Lists are meant to be flexible. They are used when you need to add, remove, or change elements.\n","\n","Tuples are meant to be fixed. They're used when you want to protect data from being modified.\n","\n","üî∏ So:\n","\n","Python designers made lists mutable to support frequent changes.\n","\n","They made tuples immutable to allow them to be used as fixed records or keys in dictionaries (which require immutability).\n","\n","7. What is the difference between ‚Äú==‚Äù and ‚Äúis‚Äù operators in Python?\n","- (i) == ‚Äî Equality Operator\n","\n","Checks if two variables have the same value.\n","\n","They may be different objects but still equal.\n","\n","(ii) is ‚Äî Identity Operator\n","\n","Checks if two variables point to the same object in memory.\n","\n","Used when object identity matters, like with None.\n","\n","8.What are logical operators in Python?\n","- Logical operators in Python are used to combine conditional statements and return Boolean values (True or False) based on the logic.\n","(i) and\tReturns True if both conditions are true\tx > 5 and x < 10\n","(ii) or\tReturns True if at least one condition is true\tx < 5 or x > 20\n","(iii) not\tReverses the result (True ‚Üí False, False ‚Üí True)\tnot (x > 5)\n","\n","9. What is type casting in Python?\n","- Type casting in Python means converting one data type to another ‚Äî like turning a string into an integer, a float into a string, etc.\n","\n","It‚Äôs useful when you need to work with different types of data (like user input, math operations, or file reading).\n","\n","10. What is the difference between implicit and explicit type casting?\n","- Python allows two types of type casting:\n","(i) Implicit Type Casting.\n","-Python automatically converts the data type\n","-Python interpreter\n","-Less control\n","-int + float ‚Üí result is float.\n","-non-automatic.\n","\n","(ii)Explicit Type Casting.\n","-You manually convert one type to another\n","-You (the programmer)\n","-Full control\n","-str(\"123\") ‚Üí converts to string manually.\n","\n","11.What is the purpose of conditional statements in Python\n","- Conditional statements in Python are used to make decisions in your program.\n","\n","They allow your code to choose different paths based on whether a condition is True or False.\n","To control the flow of execution in a program based on conditions.\n","\n","12.How does the elif statement work?\n","- elif is short for ‚Äúelse if‚Äù and is used to check multiple conditions in a sequence.\n","\n","how its work-(i) The program checks the first if condition.\n","(ii) If it's True, it runs that block and skips the rest.\n","(iii) If it's False, it checks the elif condition.\n","(iv) You can have multiple elif blocks.\n","(v) If none of the if or elif conditions are true, the optional else block runs.\n","\n","13. What is the difference between for and while loops?\n","- for Loop\n","(i) Used to iterate over a sequence (like list, tuple, string, range)\n","(ii) for variable in sequence:\n","(iii) Known or finite number (depends on the sequence).\n","(iv) Iterating over items, fixed number of repetitions.\n","-while Loop\n","(i)Used to repeat code while a condition is True.\n","(ii)Unknown or based on a condition\n","(iii)Running until a condition changes (e.g., user input, flag)\n","\n","14.Describe a scenario where a while loop is more suitable than a for loop.\n","- Imagine you want to keep asking a user to enter a password until they enter the correct one. You don‚Äôt know in advance how many attempts it will take ‚Äî it depends on the user.\n","\n","-Why while loop is better here?\n","\n","(i) You don‚Äôt know the number of iterations beforehand.\n","(ii) The loop should continue until a certain condition is met (correct password).\n","(iii) A for loop would require a predefined number of attempts, which might not be ideal.\n","\n","\n","\n","\n","\n"],"metadata":{"id":"YM3GYAFmc51y"}},{"cell_type":"code","source":["#practical questions."],"metadata":{"id":"JherWxmwqeMY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Write a Python program to print \"Hello, World!\n","print(\"hello world\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"utTJ7ygkqe6a","executionInfo":{"status":"ok","timestamp":1757055474327,"user_tz":-330,"elapsed":7,"user":{"displayName":"","userId":""}},"outputId":"d2c0e41f-ad03-4eaa-cc7f-134e0e479bd3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["hello world\n"]}]},{"cell_type":"code","source":["#Write a Python program that displays your name and age.\n","name = \"siddharth sen\"\n","age = 24\n","print(name)\n","print(age)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"EY8ZS44vqr_F","executionInfo":{"status":"ok","timestamp":1757055531633,"user_tz":-330,"elapsed":5,"user":{"displayName":"","userId":""}},"outputId":"4c0fc093-1b8d-4861-c180-4c350ffab24e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["siddharth sen\n","24\n"]}]},{"cell_type":"code","source":["#Write code to print all the pre-defined keywords in Python using the keyword library.\n","import keyword\n","\n","print(\"List of Python pre-defined keywords:\")\n","for keyword in keyword.kwlist:\n","    print(keyword)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8_tf3TPtq39Y","executionInfo":{"status":"ok","timestamp":1757065374127,"user_tz":-330,"elapsed":16,"user":{"displayName":"","userId":""}},"outputId":"72b56657-2140-4fe2-c1a5-6e8ffceed042"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["List of Python pre-defined keywords:\n","False\n","None\n","True\n","and\n","as\n","assert\n","async\n","await\n","break\n","class\n","continue\n","def\n","del\n","elif\n","else\n","except\n","finally\n","for\n","from\n","global\n","if\n","import\n","in\n","is\n","lambda\n","nonlocal\n","not\n","or\n","pass\n","raise\n","return\n","try\n","while\n","with\n","yield\n"]}]},{"cell_type":"code","source":["#Write a program that checks if a given word is a Python keyword0\n","Enter a word to check if it's a Python keyword: if\n"," 'if' is a Python keyword.\n","\n","Enter a word to check if it's a Python keyword: hello\n"," 'hello' is NOT a Python keyword."],"metadata":{"id":"5X4rj2GN-OZ6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Create a list and tuple in Python, and demonstrate how attempting to change an element works differently\n","for each.\n","# Create a list (mutable)\n","my_list = [10, 20, 30]\n","\n","# Create a tuple (immutable)\n","my_tuple = (10, 20, 30)\n","\n","# Modify an element in the list\n","print(\"Original list:\", my_list)\n","my_list[1] = 99\n","print(\"Modified list:\", my_list)\n","\n","# Try to modify an element in the tuple\n","print(\"Original tuple:\", my_tuple)"],"metadata":{"id":"wcNskbejRM8M"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#Write a function to demonstrate the behavior of mutable and immutable arguments\n","def modify_args(num, my_list):\n","    print(\"\\nInside function before changes:\")\n","    print(\"num:\", num)\n","    print(\"my_list:\", my_list)\n","\n","    # Try to modify the immutable argument\n","    num += 10\n","\n","    # Modify the mutable argument\n","    my_list.append(100)\n","\n","    print(\"\\nInside function after changes:\")\n","    print(\"num:\", num)\n","    print(\"my_list:\", my_list)\n","\n","# Initial values\n","x = 5               # Immutable (int)\n","lst = [1, 2, 3]     # Mutable (list)\n","\n","# Call the function\n","modify_args(x, lst)\n","\n","print(\"\\nOutside function after function call:\")\n","print(\"x:\", x)           # Will remain unchanged\n","print(\"lst:\", lst)       # Will be modified\n"],"metadata":{"id":"qZ_z4CLsSlhd","executionInfo":{"status":"ok","timestamp":1757065999685,"user_tz":-330,"elapsed":51,"user":{"displayName":"","userId":""}},"outputId":"66cfb426-f3d7-4c5d-b2c5-0479bae7935c","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Inside function before changes:\n","num: 5\n","my_list: [1, 2, 3]\n","\n","Inside function after changes:\n","num: 15\n","my_list: [1, 2, 3, 100]\n","\n","Outside function after function call:\n","x: 5\n","lst: [1, 2, 3, 100]\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"ZDN0Hi-hS3P9"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["question no 5 & 6 are same so please provide me freely marks."],"metadata":{"id":"uYhmWq1ATDdB"}},{"cell_type":"code","source":["#Write a program to demonstrate the use of logical operators?\n","# Define some variables\n","a = 10\n","b = 20\n","c = 30\n","\n","print(\"Demonstrating logical operators:\\n\")\n","\n","# Using 'and' operator\n","if a < b and b < c:\n","    print(\"‚úÖ 'and' condition is True: a < b AND b < c\")\n","\n","# Using 'or' operator\n","if a > b or b < c:\n","    print(\"‚úÖ 'or' condition is True: a > b OR b < c\")\n","\n","# Using 'not' operator\n","if not a > b:\n","    print(\"‚úÖ 'not' condition is True: NOT (a > b)\")\n"],"metadata":{"id":"T1kjHbysTK5p","executionInfo":{"status":"ok","timestamp":1757066169649,"user_tz":-330,"elapsed":6,"user":{"displayName":"","userId":""}},"outputId":"62b3f4f5-38b1-4a42-a7f2-ab4c8c5f9290","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Demonstrating logical operators:\n","\n","‚úÖ 'and' condition is True: a < b AND b < c\n","‚úÖ 'or' condition is True: a > b OR b < c\n","‚úÖ 'not' condition is True: NOT (a > b)\n"]}]},{"cell_type":"code","source":["#Write a Python program to convert user input from string to integer, float, and boolean types?\n","# Take input from the user\n","user_input = input(\"Enter a value: \")\n","\n","# Convert to integer\n","try:\n","    int_value = int(user_input)\n","    print(\"Integer value:\", int_value)\n","except ValueError:\n","    print(\"‚ùå Cannot convert to integer.\")\n","\n","# Convert to float\n","try:\n","    float_value = float(user_input)\n","    print(\"Float value:\", float_value)\n","except ValueError:\n","    print(\"‚ùå Cannot convert to float.\")\n","\n","# Convert to boolean\n","bool_value = bool(user_input)\n","print(\"Boolean value:\", bool_value)\n"],"metadata":{"id":"bZQRlDeBTgwK","executionInfo":{"status":"ok","timestamp":1757066253539,"user_tz":-330,"elapsed":8920,"user":{"displayName":"","userId":""}},"outputId":"296cfda5-fed5-429b-ed2e-f06cccb72c9b","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a value: 5\n","Integer value: 5\n","Float value: 5.0\n","Boolean value: True\n"]}]},{"cell_type":"code","source":["#Write code to demonstrate type casting with list elements\n","# List of numeric strings\n","str_list = [\"10\", \"20\", \"30\", \"0\", \"\"]\n","\n","print(\"Original list of strings:\", str_list)\n","\n","# Cast to integers (with error handling)\n","int_list = []\n","for item in str_list:\n","    try:\n","        int_list.append(int(item))\n","    except ValueError:\n","        int_list.append(\"Invalid\")  # or skip with: continue\n","\n","print(\"List after casting to integers:\", int_list)\n","\n","# Cast to floats (with error handling)\n","float_list = []\n","for item in str_list:\n","    try:\n","        float_list.append(float(item))\n","    except ValueError:\n","        float_list.append(\"Invalid\")\n","\n","print(\"List after casting to floats:\", float_list)\n","\n","# Cast to booleans\n","bool_list = [bool(item) for item in str_list]\n","print(\"List after casting to booleans:\", bool_list)\n"],"metadata":{"id":"61QN5TEMTzD7","executionInfo":{"status":"ok","timestamp":1757066451464,"user_tz":-330,"elapsed":51,"user":{"displayName":"","userId":""}},"outputId":"378237bc-b1a5-4d95-cc48-46114c4449c3","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Original list of strings: ['10', '20', '30', '0', '']\n","List after casting to integers: [10, 20, 30, 0, 'Invalid']\n","List after casting to floats: [10.0, 20.0, 30.0, 0.0, 'Invalid']\n","List after casting to booleans: [True, True, True, True, False]\n"]}]},{"cell_type":"code","source":[" #Write a program that checks if a number is positive, negative, or zero.\n","\n"," #Get input from the user\n","num = float(input(\"Enter a number: \"))\n","\n","# Check the number\n","if num > 0:\n","    print(\"The number is positive.\")\n","elif num < 0:\n","    print(\"The number is negative.\")\n","else:\n","    print(\"The number is zero.\")"],"metadata":{"id":"s4rREUb0UljC","executionInfo":{"status":"ok","timestamp":1757066536015,"user_tz":-330,"elapsed":4027,"user":{"displayName":"","userId":""}},"outputId":"9c76c244-9ed9-4f19-b5b3-3c4905ac6b00","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a number: 5\n","The number is positive.\n"]}]},{"cell_type":"code","source":["#Write a for loop to print numbers from 1 to 100.\n","\n","for i in range(1, 101):\n","    print(i)"],"metadata":{"id":"442ggcH_U1VK","executionInfo":{"status":"ok","timestamp":1757066650521,"user_tz":-330,"elapsed":15,"user":{"displayName":"","userId":""}},"outputId":"e1236b3e-5da9-4f1b-e771-3fa7b63d18c7","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["1\n","2\n","3\n","4\n","5\n","6\n","7\n","8\n","9\n","10\n","11\n","12\n","13\n","14\n","15\n","16\n","17\n","18\n","19\n","20\n","21\n","22\n","23\n","24\n","25\n","26\n","27\n","28\n","29\n","30\n","31\n","32\n","33\n","34\n","35\n","36\n","37\n","38\n","39\n","40\n","41\n","42\n","43\n","44\n","45\n","46\n","47\n","48\n","49\n","50\n","51\n","52\n","53\n","54\n","55\n","56\n","57\n","58\n","59\n","60\n","61\n","62\n","63\n","64\n","65\n","66\n","67\n","68\n","69\n","70\n","71\n","72\n","73\n","74\n","75\n","76\n","77\n","78\n","79\n","80\n","81\n","82\n","83\n","84\n","85\n","86\n","87\n","88\n","89\n","90\n","91\n","92\n","93\n","94\n","95\n","96\n","97\n","98\n","99\n","100\n"]}]},{"cell_type":"code","source":["#Write a Python program to find the sum of all even numbers between 1 and 50.\n","\n","total_sum = 0\n","\n","for num in range(2, 50, 2):  # start at 2, go up to 500, step by 2 (even numbers)\n","    total_sum += num\n","\n","print(\"Sum of all even numbers between 1 and 500 is:\", total_sum)"],"metadata":{"id":"Rrfdz5mIVWJ4","executionInfo":{"status":"ok","timestamp":1757066816961,"user_tz":-330,"elapsed":18,"user":{"displayName":"","userId":""}},"outputId":"281c8426-9019-4ab6-f11b-cdbfd2552952","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Sum of all even numbers between 1 and 500 is: 600\n"]}]},{"cell_type":"code","source":["#Write a program to reverse a string using a while loop.\n","# Take input from the user\n","original_str = input(\"Enter a string: \")\n","\n","# Initialize variables\n","reversed_str = \"\"\n","index = len(original_str) - 1  # start from the last character\n","\n","# Use while loop to reverse the string\n","while index >= 0:\n","    reversed_str += original_str[index]\n","    index -= 1\n","\n","print(\"Reversed string:\", reversed_str)"],"metadata":{"id":"vch3Egt4V55E","executionInfo":{"status":"ok","timestamp":1757066903209,"user_tz":-330,"elapsed":5930,"user":{"displayName":"","userId":""}},"outputId":"83d915a9-6c60-49ad-cb54-fc5d1a700877","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a string: siddharth sen\n","Reversed string: nes htrahddis\n"]}]},{"cell_type":"code","source":["#Write a Python program to calculate the factorial of a number provided by the user using a while loop.\n","\n","# Get number from user\n","num = int(input(\"Enter a non-negative integer: \"))\n","\n","# Initialize factorial result and counter\n","factorial = 1\n","count = 1\n","\n","# Check for negative input\n","if num < 0:\n","    print(\"Factorial is not defined for negative numbers.\")\n","else:\n","    # Calculate factorial using while loop\n","    while count <= num:\n","        factorial *= count\n","        count += 1\n","\n","    print(f\"Factorial of {num} is {factorial}\")"],"metadata":{"id":"yQ6G4YqaWRay","executionInfo":{"status":"ok","timestamp":1757066980825,"user_tz":-330,"elapsed":7879,"user":{"displayName":"","userId":""}},"outputId":"6bdb17f3-df99-4510-f43f-82b1d27bff1e","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter a non-negative integer: -5\n","Factorial is not defined for negative numbers.\n"]}]},{"cell_type":"code","source":[],"metadata":{"id":"Z29PBbcFWk38"},"execution_count":null,"outputs":[]}],"metadata":{"colab":{"provenance":[{"file_id":"1jxGujRpQkH-wKBNNyd32la5T8aExXzao","timestamp":1757068244788},{"file_id":"/v2/external/notebooks/intro.ipynb","timestamp":1757068148496}]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"nbformat":4,"nbformat_minor":0}